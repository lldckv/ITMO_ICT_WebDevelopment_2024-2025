{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043a \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0418\u0422\u041c\u041e \u0418\u041a\u0422 24/25. \u0414\u044c\u044f\u0447\u043a\u043e\u0432\u0430 \u0410\u043b\u043b\u0430, \u041a3343.</p>"},{"location":"Lr1/task1/","title":"Task 1","text":""},{"location":"Lr1/task1/#_1","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f socket</p>"},{"location":"Lr1/task1/#_2","title":"Task 1","text":"<p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b:  </p> <p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430, client.py: </p> <pre><code>import socket\n\n\ndef connect():\n    serverIP = \"127.0.0.1\"\n    portNumber = 8080\n    bufferSize = 1024\n\n    msgFromClient = \"Hello, server!\"\n\n    UDPClientSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)\n\n    UDPClientSocket.sendto(str.encode(msgFromClient), (serverIP, portNumber))\n    msgFromServer = UDPClientSocket.recvfrom(bufferSize)\n    msg = \"Message from Server: {}\".format(msgFromServer[0].decode())\n\n    print(msg)\n\n\nif __name__ == \"__main__\":\n    connect()\n\n</code></pre> <p>server.py:</p> <pre><code>import socket\n\ndef connect():\n    localIP = \"127.0.0.1\"\n    localPort = 8080\n    bufferSize = 1024\n\n    msgFromServer = \"Hello, client!\"\n    bytesToSend = str.encode(msgFromServer)\n\n    UDPServerSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)\n\n    UDPServerSocket.bind((localIP, localPort))\n    print(\"UDP server up and listening\")\n\n    while True:\n        message, address = UDPServerSocket.recvfrom(bufferSize)\n        clientMsg = \"Message from Client: {}\".format(message.decode())\n\n        print(clientMsg)\n\n        UDPServerSocket.sendto(bytesToSend, address)\n\n\nif __name__ == \"__main__\":\n    connect()\n\n</code></pre>"},{"location":"Lr1/task2/","title":"Task 2","text":""},{"location":"Lr1/task2/#_1","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p> <p>\u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439:</p> <pre><code>\u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430.\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f.\n\u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438.\n\u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430.\n</code></pre> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:</p> <pre><code>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.\n\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP.\n</code></pre> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 -  \u043f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430.</p>"},{"location":"Lr1/task2/#_2","title":"Task 2","text":"<p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b:  </p> <p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430, client.py: </p> <pre><code>import socket\nfrom typing import Union\n\n\ndef check_data(data: str) -&gt; Union[tuple[float, str], tuple[None, str]]:\n    try:\n        data = data.replace(',', '.')\n        data = float(data)\n        return data, '\u041e\u041a'\n    except ValueError:\n        return None, \"\u041e\u0448\u0438\u0431\u043a\u0430: \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e\"\n\n\ndef connect():\n    host = '127.0.0.1'\n    port = 8080\n    buffersize = 1024\n\n    client_socket = socket.socket()\n    client_socket.connect((host, port))\n\n    print(\"\u0420\u0430\u0441\u0447\u0435\u0442 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430\")\n\n    a = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f a: \")\n    a, code = check_data(a)\n    if a is None:\n        print(code)\n    h = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u0432\u044b\u0441\u043e\u0442\u044b, \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0439 \u043a \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044e h: \")\n    h, code = check_data(h)\n    if h is None:\n        print(code)\n\n    message = f\"{a} {h}\"\n    client_socket.send(message.encode())\n\n    result = client_socket.recv(buffersize).decode()\n    print(f\"\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430: {result}\")\n\n    client_socket.close()\n\n\nif __name__ == \"__main__\":\n    connect()\n\n\n\n</code></pre> <p>server.py:</p> <pre><code>import socket\nfrom typing import Tuple\n\n\ndef find_area(a: float, h: float, figure_len: int = 2) -&gt; float:\n    return round(a * h, figure_len)\n\n\n\ndef check_data(data: str) -&gt; Tuple[float, float, str]:\n    a, b = map(float, data.split())\n    if a &gt;= 0 and b &gt;= 0:\n        return a, b, '\u041e\u041a'\n    else:\n        return 0, 0, \"\u041e\u0431\u0430 \u0447\u0438\u0441\u043b\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043d\u0435\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438.\"\n\n\ndef connect():\n    host = '127.0.0.1'\n    port = 8080\n    buffersize = 1024\n\n    server_socket = socket.socket()\n    server_socket.bind((host, port))\n\n    server_socket.listen()\n    conn, _ = server_socket.accept()\n\n    print(\"TCP server up and listening\")\n\n    while True:\n        data = conn.recv(buffersize).decode()\n        if not data:\n            break\n        a, h, status = check_data(data)\n        if a is None:\n            conn.send(status.encode())\n        else:\n            result = find_area(a, h)\n            conn.send(str(result).encode())\n            print(f'\u041e\u0442\u0432\u0435\u0442: {result}')\n\n    conn.close()\n\n\nif __name__ == \"__main__\":\n    connect()\n\n\n</code></pre>"},{"location":"Lr1/task3/","title":"Task 3","text":""},{"location":"Lr1/task3/#_1","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.</p> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:</p> <pre><code>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.\n</code></pre>"},{"location":"Lr1/task3/#_2","title":"Task 3","text":"<p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b:  </p> <p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430, index.html: </p> <pre><code>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Task 3&lt;/title&gt;\n     &lt;style&gt;\n        body {\n            padding: 100px;\n            font-family: \"Gill Sans\", sans-serif;\n            text-align: center;\n            background-color: #D7ABFFFF;\n            color: #00032c;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, world!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n</code></pre> <p>server.py:</p> <pre><code>import socket\n\n\ndef connect(file_loc: str = 'index.html'):\n    host = '127.0.0.1'\n    port = 8080\n\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((host, port))\n    server_socket.listen(1)\n\n    print(f\"Server is up and running: http://localhost:{port}\")\n\n    while True:\n        client_conn, client_addr = server_socket.accept()\n\n        with open(file_loc, 'r') as f:\n            content = f.read()\n\n        response = f\"HTTP/1.1 200 OK\\nContent-Type: text/html\\nContent-Length: {len(content)}\\n\\n{content}\"\n        client_conn.sendall(response.encode())\n\n        client_conn.close()\n\n\nif __name__ == \"__main__\":\n    html_file_path = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0443\u0442\u044c \u043a HTML \u0444\u0430\u0439\u043b\u0443: \")\n    connect(html_file_path)\n\n\n</code></pre>"},{"location":"Lr1/task4/","title":"Task 4","text":""},{"location":"Lr1/task4/#_1","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.</p> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:</p> <pre><code>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.\n\u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading.\n</code></pre> <p>\u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d \u0434\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430.</p>"},{"location":"Lr1/task4/#_2","title":"Task 4","text":"<p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b:  </p> <p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430, client.py: </p> <pre><code>import socket\nimport threading\n\nHOST = '127.0.0.1'\nPORT = 8080\nbuffersize = 1024\n\n\ndef receive_message(target_socket):\n    while True:\n        try:\n            message = target_socket.recv(buffersize)\n            if not message:\n                break\n            print(message.decode())\n        except:\n            break\n\n\ndef connect():\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect((HOST, PORT))\n    threading.Thread(target=receive_message, args=(client_socket,)).start()\n    while True:\n        message = input()\n        if message == 'exit':\n            client_socket.close()\n            break\n        client_socket.send(message.encode())\n\n\nif __name__ == \"__main__\":\n    connect()\n\n\n</code></pre> <p>server.py:</p> <pre><code>\nimport socket\nimport threading\n\nHOST = '127.0.0.1'\nPORT = 8080\nbuffersize = 1024\n\nclients = {}\naddresses = {}\n\n\ndef handle_client(client_socket, client_address):\n    name = client_socket.recv(buffersize).decode()\n    welcome_message = f\"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 \u0447\u0430\u0442, {name}! \\n \u0414\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u0432\u0432\u0435\u0434\u0438\u0442\u0435 'exit'\"\n    client_socket.send(bytes(welcome_message, \"utf-8\"))\n    message = f\"{name} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u0442\u0441\u044f \u043a \u0447\u0430\u0442\u0443 \"\n    broadcast(bytes(message, \"utf-8\"))\n    clients[client_socket] = name\n    addresses[client_socket] = client_address\n\n    while True:\n        try:\n            message = client_socket.recv(buffersize)\n            if message:\n                broadcast(message, name+\": \")\n            else:\n                remove_client(client_socket)\n        except:\n            continue\n\n\ndef broadcast(message, prefix=\"\"):\n    for sock in clients:\n        sock.send(bytes(prefix, \"utf-8\")+message)\n\n\ndef remove_client(client_socket):\n    name = clients[client_socket]\n    del clients[client_socket]\n    del addresses[client_socket]\n    message = f\"{name} \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0438\u0437 \u0447\u0430\u0442\u0430\"\n    broadcast(bytes(message, \"utf-8\"))\n\n\ndef connect():\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:\n        server_socket.bind((HOST, PORT))\n        server_socket.listen()\n        print(\"Server is up and running\")\n\n        while True:\n            client_socket, client_address = server_socket.accept()\n            print(f\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043a\u043b\u0438\u0435\u043d\u0442 c \u0430\u0434\u0440\u0435\u0441\u043e\u043c {client_address[0]}, \u043f\u043e\u0440\u0442 {client_address[1]}\")\n            client_socket.send(bytes(\"\u0412\u0430\u0448\u0435 \u0438\u043c\u044f: \", \"utf-8\"))\n            addresses[client_socket] = client_address\n            threading.Thread(target=handle_client, args=(client_socket, client_address)).start()\n\n\nif __name__ == \"__main__\":\n    connect()\n\n\n</code></pre>"},{"location":"Lr1/task5/","title":"Task 5","text":""},{"location":"Lr1/task5/#_1","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python.</p> <p>\u0417\u0430\u0434\u0430\u043d\u0438\u0435:</p> <pre><code>\u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d:\n    \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435.\n    \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.\n</code></pre>"},{"location":"Lr1/task5/#_2","title":"Task 5","text":"<p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b:  </p> <p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430, index.html: </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ru\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;\u0416\u0443\u0440\u043d\u0430\u043b \u043e\u0446\u0435\u043d\u043e\u043a&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family:  \"Gill Sans\", sans-serif;\n            background-color: #D7ABFFFF;\n            margin: 0;\n            padding: 5%;\n            text-align: center;\n            color: #00032c;\n        }\n        h1 {\n            color: #2c2c2c;\n        }\n        form {\n            background: floralwhite;\n            padding: 30px;\n            border-radius: 4px;\n            margin-bottom: 10%;\n        }\n        input[type=\"text\"] {\n            width: 100%;\n            padding: 10px;\n            margin: 10px 0;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n        }\n        input[type=\"submit\"] {\n            background-color: mediumseagreen;\n            color: white;\n            padding: 10px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        input[type=\"submit\"]:hover {\n            background-color: springgreen;\n        }\n        table {\n            width: 60%;\n            margin: 0 auto;\n            border-collapse: collapse;\n        }\n        th, td {\n            padding: 10px;\n            text-align: center;\n\n        }\n        th {\n            background-color: mediumseagreen;\n            color: floralwhite;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;\u0412\u0432\u043e\u0434 \u0432 \u0436\u0443\u0440\u043d\u0430\u043b \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d&lt;/h1&gt;\n    &lt;form method=\"POST\" action=\"/\"&gt;\n        \u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: &lt;input type=\"text\" name=\"subject\" required&gt;&lt;br&gt;\n        \u041e\u0446\u0435\u043d\u043a\u0430: &lt;input type=\"text\" name=\"grade\" required&gt;&lt;br&gt;\n        &lt;input type=\"submit\" value=\"+\"&gt;\n    &lt;/form&gt;\n\n    &lt;h2&gt;\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0446\u0435\u043d\u043e\u043a:&lt;/h2&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430&lt;/th&gt;\n            &lt;th&gt;\u041e\u0446\u0435\u043d\u043a\u0430&lt;/th&gt;\n            &lt;!-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 --&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n</code></pre> <p>server.py:</p> <pre><code>import socket\nfrom urllib.parse import parse_qs, unquote\n\ngrades = {}\nbuffersize = 1024\n\ndef read_html(file_path: str) -&gt; str:\n    try:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            return file.read()\n    except FileNotFoundError:\n        return \"&lt;h1&gt;HTML \u0444\u0430\u0439\u043b \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d&lt;/h1&gt;\"\n\ndef generate_html(file_loc: str) -&gt; str:\n    html = read_html(file_loc)\n\n    table_rows = \"\"\n    if grades:\n        for subject, grade_list in grades.items():\n            grades_str = ', '.join(grade_list)  # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0446\u0435\u043d\u043e\u043a \u0432 \u0441\u0442\u0440\u043e\u043a\u0443\n            table_rows += f\"&lt;tr&gt;&lt;td&gt;{subject}&lt;/td&gt;&lt;td&gt;{grades_str}&lt;/td&gt;&lt;/tr&gt;\"\n\n    html = html.replace(\"&lt;!-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 --&gt;\", table_rows)  # \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043d\u0430 \u043c\u0435\u0441\u0442\u0435 \u043c\u0430\u0440\u043a\u0435\u0440\u0430 \u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u0435\n    return html\n\ndef parse_post_data(data: str) -&gt; dict:\n    params = {}\n    try:\n        body = data.split('\\r\\n\\r\\n', 1)[1]  # \u043e\u0442\u0434\u0435\u043b\u044f\u0435\u043c \u0442\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n        parsed_data = parse_qs(body)\n        for key, value in parsed_data.items():\n            params[key] = unquote(value[0])\n    except IndexError:\n        pass\n    return params\n\ndef start_server(file_loc: str = 'index.html') -&gt; None:\n    host = '127.0.0.1'\n    port = 8888\n\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((host, port))\n    server_socket.listen(1)\n    print(f\"Server is up and running: http://{host}:{port}\")\n\n    while True:\n        client_socket, addr = server_socket.accept()  # \u043d\u043e\u0432\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\n        request = client_socket.recv(buffersize).decode()\n\n        request_line = request.splitlines()[0]\n        method, path, _ = request_line.split()  # \u0432\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u043c\u0435\u0442\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n\n        if method == 'GET':\n            response_body = generate_html(file_loc)  # \u0433\u0435\u043d\u0435\u0440\u0438\u043c \u0448\u0430\u0431\u043b\u043e\u043d\n            response = 'HTTP/1.1 200 OK\\nContent-Type: text/html; charset=utf-8\\n\\n' + response_body\n\n        elif method == 'POST':\n            params = parse_post_data(request)  # \u043f\u0430\u0440\u0441\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n            subject = params.get('subject', '')\n            grade = params.get('grade', '')\n\n            if subject and grade:\n                if subject not in grades:\n                    grades[subject] = []  # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0446\u0435\u043d\u043e\u043a \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430\n                grades[subject].append(grade)  # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0446\u0435\u043d\u043a\u0443 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430\n            response = 'HTTP/1.1 303 See Other\\nLocation: /\\n\\n'  # \u0440\u0435\u0434\u0438\u0440\u0435\u043a\u0442 \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443\n\n        else:\n            response = 'HTTP/1.1 405 Method Not Allowed\\n\\n'\n\n        client_socket.sendall(response.encode('utf-8'))\n        client_socket.close()\n\nif __name__ == \"__main__\":\n    html_file_path = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0443\u0442\u044c \u043a HTML \u0444\u0430\u0439\u043b\u0443: \")\n    start_server(html_file_path)\n\n\n</code></pre>"}]}